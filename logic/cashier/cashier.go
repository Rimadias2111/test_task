package cashier

import (
	"fmt"
	"log"

	"github.com/google/uuid"
	"test_task/logic"
	"test_task/models"
)

type Cashier struct {
	logic *logic.Logic
}

func NewCashier(l *logic.Logic) *Cashier {
	return &Cashier{logic: l}
}

func (c *Cashier) Menu() {
	for {
		fmt.Println("\n–ú–µ–Ω—é –∫–∞—Å—Å–∏—Ä–∞:")
		fmt.Println("1 - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
		fmt.Println("2 - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã")
		fmt.Println("3 - –ù–∞–∑–∞–¥")

		var choice int
		fmt.Scan(&choice)

		switch choice {
		case 1:
			c.CreateOrder()
		case 2:
			c.logic.ShowAllOrders()
		case 3:
			return
		default:
			fmt.Println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.")
		}
	}
}

func (c *Cashier) CreateOrder() {
	order := models.Order{
		Id:         uuid.New().String(),
		TotalPrice: 0,
		OrderItems: []models.OrderItem{},
	}

	fmt.Println("\n–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...")

	totalWeight := 0.0
	totalBasePrice := 0.0

	for {
		serviceKinds, err := c.logic.GetAllServiceKinds()
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:", err)
			return
		}

		fmt.Println("\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:")
		for i, s := range serviceKinds {
			fmt.Printf("%d - %s (%s)\n", i+1, s.Name, s.Unit)
		}

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏ (0 - –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä): ")
		var serviceChoice int
		fmt.Scan(&serviceChoice)

		if serviceChoice == 0 {
			break
		}

		if serviceChoice < 1 || serviceChoice > len(serviceKinds) {
			fmt.Println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.")
			continue
		}

		selectedService := serviceKinds[serviceChoice-1]

		clothesFilter := models.GetAllServiceClothesReq{ServiceKindId: selectedService.Id}
		serviceClothes, err := c.logic.GetAllServiceClothes(clothesFilter)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–µ–∂–¥—ã:", err)
			continue
		}

		fmt.Println("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–µ–∂–¥—É –¥–ª—è —É—Å–ª—É–≥–∏:")
		for i, item := range serviceClothes {
			fmt.Printf("%d - %s (–¶–µ–Ω–∞: %.2f)\n", i+1, item.Name, item.Price)
		}

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–¥–µ–∂–¥—ã: ")
		var clothesChoice int
		fmt.Scan(&clothesChoice)

		if clothesChoice < 1 || clothesChoice > len(serviceClothes) {
			fmt.Println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.")
			continue
		}

		selectedClothes := serviceClothes[clothesChoice-1]

		var quantity int
		var weight float64
		var price float64

		if selectedService.Unit == "item" {
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ")
			fmt.Scan(&quantity)
			if quantity < 1 {
				fmt.Println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
				continue
			}
			price = selectedClothes.Price * float64(quantity)
		} else {
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥): ")
			fmt.Scan(&weight)
			if weight <= 0 {
				fmt.Println("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
				continue
			}
			price = selectedClothes.Price * weight
			totalWeight += weight
		}

		fmt.Print("–≠—Ç–∞ –≤–µ—â—å –¥–µ—Ç—Å–∫–∞—è? (1 - –î–∞, 0 - –ù–µ—Ç): ")
		var isChildItem int
		fmt.Scan(&isChildItem)

		if isChildItem == 1 {
			price *= 0.5
			fmt.Println("üü¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ 50% –Ω–∞ –¥–µ—Ç—Å–∫—É—é –≤–µ—â—å.")
		}

		totalBasePrice += price
		order.TotalPrice += price

		orderItem := models.OrderItem{
			Id:               uuid.New().String(),
			OrderId:          order.Id,
			ServiceKindId:    selectedService.Id,
			ServiceClothesId: selectedClothes.Id,
			Quantity:         &quantity,
			Weight:           &weight,
			Price:            price,
		}
		order.OrderItems = append(order.OrderItems, orderItem)
	}

	fmt.Print("\n–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑? (1 - –î–∞, 0 - –ù–µ—Ç): ")
	var isExpress int
	discount := 0.0
	fmt.Scan(&isExpress)

	if isExpress == 1 {
		order.Express = true
		order.TotalPrice *= 1.5
	} else {
		fmt.Print("–ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ—â–∏ –Ω–∞ 5+ –¥–Ω–µ–π? (1 - –î–∞, 0 - –ù–µ—Ç): ")
		var isDelayed int
		fmt.Scan(&isDelayed)

		if isDelayed == 1 {
			discount += 0.3
			fmt.Println("üü¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ 30% –∑–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ.")
		}
	}

	if totalWeight > 10 {
		discount += 0.2
		fmt.Println("üü¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ 20% –∑–∞ –±–æ–ª—å—à–æ–π –≤–µ—Å (>10 –∫–≥).")
	}

	if discount > 0 {
		order.TotalPrice *= (1 - discount)
		fmt.Printf("üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤–µ—Å—å –∑–∞–∫–∞–∑: %.0f%%\n", discount*100)
	}

	if err := c.logic.CreateOrder(&order); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", err)
		return
	}

	fmt.Printf("\n‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–∫–∏–¥–æ–∫: %.2f —Å–æ–º–æ–Ω–∏\n", order.TotalPrice)
}
